datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ========================
// Authentication Models
// ========================

model User {
  id             String   @id @default(uuid())
  fullName       String
  phoneNumber    String
  email          String   @unique
  emailVerified  DateTime?
  password       String
  lastLoginAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  sessions       Session[]
  tokens         Token[]
  roles          Role[]   @relation("RoleToUser")
  auditLogs      AuditLog[]
  userConsents   UserConsent[]
  stores         Store[]
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model Token {
  id      String   @id @default(uuid())
  token   String   @unique
  expires DateTime
  type    String
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ========================
// RBAC Models
// ========================

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  permissions RolePermission[]
  users       User[]           @relation("RoleToUser")
}

model Permission {
  id          String           @id @default(uuid())
  name        String           @unique
  resourceId  String?
  actionId    String?
  description String

  action      Action?          @relation(fields: [actionId], references: [id])
  resource    Resource?        @relation(fields: [resourceId], references: [id])
  roles       RolePermission[]
  menuItems   MenuItem[]

  @@index([resourceId])
  @@index([actionId])
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  grantedBy    String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@unique([roleId, permissionId])
}

model Resource {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  category    String?
  permissions Permission[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Action {
  id          String     @id @default(uuid())
  name        String     @unique
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  permissions Permission[]
}

model MenuItem {
  id          String     @id @default(uuid())
  label       String
  icon        String
  href        String
  parentId    String?
  parent      MenuItem?  @relation("MenuParent", fields: [parentId], references: [id])
  children    MenuItem[] @relation("MenuParent")
  permissionId String?
  permission  Permission? @relation(fields: [permissionId], references: [id])
  showInMenu  Boolean    @default(true)
  order       Int?

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([permissionId])
}

// ========================
// System Monitoring
// ========================

model AuditLog {
  id          String   @id @default(cuid())
  action      String
  description String
  metadata    String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@index([action])
  @@index([userId])
  @@index([createdAt])
}

model UserConsent {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  consentGiven   Boolean  @default(false)
  consentDate    DateTime @default(now())
  consentIp      String
  method         String   @default("web_form")
  serviceContext String   @default("default")

  @@unique([userId, serviceContext])
  @@index([userId])
  @@index([consentDate])
}

model TrackingSession {
  id             String   @id @default(cuid())
  utm_source     String?
  utm_medium     String?
  utm_campaign   String?
  utm_content    String?
  utm_term       String?
  fbclid         String?
  gclid          String?
  referrer       String?
  fbp            String?
  fbc            String?
  ip             String
  userAgent      String
  createdAt      DateTime @default(now())
  lastSeenAt     DateTime @default(now())
  orders         Order[]

  @@index([createdAt, utm_source, utm_campaign])
}


// ========================
// Checkout and Digital Sales
// ========================

model Product {
  id              String   @id @default(cuid())
  name            String
  description     String
  imageUrl        String?
  price           Int
  priceCurrency   String   @default("BRL") // Multi-moeda  
  salesPageUrl    String
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?

  checkouts       Checkout[]

  storeId         String             
  store           Store              @relation(fields: [storeId], references: [id])
  
  mainProductBumps OrderBump[] @relation("MainOrderBumps")
  asBumpProduct   OrderBump[] @relation("BumpProducts")
    
  orders          Order[]
  orderItems      OrderItem[]
  
  @@index([isActive, deletedAt])
}




model Checkout {
  id              String    @id @default(cuid())  
  productId       String
  campaignName    String?
  
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  requiredFields  Json?     @default("[\"customerName\",\"customerEmail\",\"customerPhone\"]")

  product         Product   @relation(fields: [productId], references: [id])
  orders          Order[]  
  
  @@index([productId])
}

model OrderBump {
  id                String   @id @default(cuid())
  mainProductId     String   
  bumpProductId     String   
  
  mainProduct       Product  @relation("MainOrderBumps", fields: [mainProductId], references: [id])
  bumpProduct       Product  @relation("BumpProducts", fields: [bumpProductId], references: [id])
  
  title             String   
  description       String   
  specialPrice      Int
  displayOrder      Int?     // Ordem de exibição
  callToAction      String?  // Texto do botão de ação
  showProductImage  Boolean  @default(true) // Mostrar imagem do produto
  isActive          Boolean  @default(true)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  @@index([mainProductId])
  @@index([bumpProductId])
}

model Order {
  id              String        @id @default(uuid())
  checkoutId      String
  productId       String
  customerId      String
  paidAmount      Float
  status          OrderStatus   @default(DRAFT)  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?
  
  trackingSessionId String?
  trackingSession TrackingSession? @relation(fields: [trackingSessionId], references: [id])

  storeId         String        
  store           Store         @relation(fields: [storeId], references: [id])
    
  checkout        Checkout      @relation(fields: [checkoutId], references: [id])
  product         Product       @relation(fields: [productId], references: [id])  
  orderItems      OrderItem[]
  statusHistory   OrderStatusHistory[]
  customer        Customer      @relation(fields: [customerId], references: [id])
  paymentTransactions PaymentTransaction[]
  
@@index([status])
}

model OrderItem {
  id          String  @id @default(uuid())
  orderId     String
  productId   String
  quantity    Int     @default(1)
  priceAtTime Float    // Preço no momento da compra
  isOrderBump Boolean  @default(false)
  isUpsell    Boolean  @default(false)
  createdAt   DateTime @default(now())
  deletedAt   DateTime?

  order       Order   @relation(fields: [orderId], references: [id])
  product     Product @relation(fields: [productId], references: [id])
  
  @@index([orderId])
  @@index([productId])
  @@index([deletedAt])
}

model OrderStatusHistory {
  id             String        @id @default(uuid())
  orderId        String
  previousStatus OrderStatus?
  newStatus      OrderStatus
  notes          String?
  createdAt      DateTime      @default(now())
  order          Order         @relation(fields: [orderId], references: [id])
  
  @@index([orderId, createdAt])
}

model Webhook {
  id          String    @id @default(cuid())
  url         String
  events      String[]  // array de eventos: "order.created", "payment.approved", etc.
  active      Boolean   @default(true)
  secretKey   String?   // chave para assinatura HMAC
  description String?
  retryCount  Int       @default(0) // Número de tentativas de envio
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  
  logs        WebhookLog[]
  
  @@index([active])
}

model WebhookLog {
  id          String   @id @default(cuid())
  webhookId   String
  event       String
  payload     String   // JSON payload enviado
  response    String?  // resposta do servidor externo
  statusCode  Int?
  success     Boolean
  sentAt      DateTime @default(now())
  
  webhook     Webhook  @relation(fields: [webhookId], references: [id])
  
  @@index([webhookId, success])
  @@index([event, sentAt])
}

model Customer {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  phone      String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  orders     Order[]
  
  @@index([email])
  @@index([phone])
}

model PaymentTransaction {
  id                 String         @id @default(cuid())
  orderId            String
  order              Order          @relation(fields: [orderId], references: [id])

  gatewayPaymentId   String?        // ID da transação no Mercado Pago / Stripe
  status             PaymentStatus  // Enum: PENDING, APPROVED, FAILED, etc.
  amount             Decimal
  currency           String         @default("BRL")
  paymentMethod      String         // Ex: "pix", "credit_card"
  paymentDetails     Json?          // QR code, boleto URL, etc.
  externalReference  String?        // Referência opcional nossa ou do gateway
  webhookData        Json?          // Payload recebido do webhook (se houver)

  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  @@index([orderId])
  @@index([status])
}

model StorePaymentConfig {
  id             String   @id @default(cuid())
  storeId        String
  paymentMethod  String   // Ex: "pix", "credit_card"
  currency       String   // Ex: "BRL", "USD"
  provider       String   // Ex: "mercado_pago", "stripe"
  config         Json     // Dados da chave pública/secreta ou token
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  store          Store    @relation(fields: [storeId], references: [id])

  @@unique([storeId, paymentMethod, currency]) // Evita duplicatas
  @@index([provider])
}

model Store {
  id          String   @id @default(cuid())
  name        String  
  ownerId     String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner       User     @relation(fields: [ownerId], references: [id])
  paymentConfig     StorePaymentConfig[]
  products    Product[]
  orders      Order[]

  @@index([ownerId])
}

enum OrderStatus {
  DRAFT
  PENDING_PAYMENT
  PAYMENT_PROCESSING
  PAID
  CANCELLED
  REFUNDED
  DELIVERED
}

enum PaymentStatus {
  PENDING
  APPROVED
  FAILED
  CANCELLED
  REFUNDED
}
